// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package data

import (
	"context"
)

const getCustomer = `-- name: GetCustomer :one
SELECT uid, email, photo_url, is_existing_customer, phone, first_name, last_name, bhc_plot_number
FROM customer
WHERE uid = ?
`

type GetCustomerRow struct {
	Uid                string `json:"uid"`
	Email              string `json:"email"`
	PhotoUrl           string `json:"photo_url"`
	IsExistingCustomer bool   `json:"is_existing_customer"`
	Phone              string `json:"phone"`
	FirstName          string `json:"first_name"`
	LastName           string `json:"last_name"`
	BhcPlotNumber      string `json:"bhc_plot_number"`
}

func (q *Queries) GetCustomer(ctx context.Context, uid string) (GetCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, uid)
	var i GetCustomerRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.PhotoUrl,
		&i.IsExistingCustomer,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.BhcPlotNumber,
	)
	return i, err
}

const onboardCustomer = `-- name: OnboardCustomer :one
INSERT INTO customer (
    uid, email, photo_url, is_existing_customer, phone, first_name, last_name, bhc_plot_number
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
RETURNING uid, email, photo_url, is_existing_customer, phone, first_name, last_name, bhc_plot_number
`

type OnboardCustomerParams struct {
	Uid                string `json:"uid"`
	Email              string `json:"email"`
	PhotoUrl           string `json:"photo_url"`
	IsExistingCustomer bool   `json:"is_existing_customer"`
	Phone              string `json:"phone"`
	FirstName          string `json:"first_name"`
	LastName           string `json:"last_name"`
	BhcPlotNumber      string `json:"bhc_plot_number"`
}

type OnboardCustomerRow struct {
	Uid                string `json:"uid"`
	Email              string `json:"email"`
	PhotoUrl           string `json:"photo_url"`
	IsExistingCustomer bool   `json:"is_existing_customer"`
	Phone              string `json:"phone"`
	FirstName          string `json:"first_name"`
	LastName           string `json:"last_name"`
	BhcPlotNumber      string `json:"bhc_plot_number"`
}

func (q *Queries) OnboardCustomer(ctx context.Context, arg OnboardCustomerParams) (OnboardCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, onboardCustomer,
		arg.Uid,
		arg.Email,
		arg.PhotoUrl,
		arg.IsExistingCustomer,
		arg.Phone,
		arg.FirstName,
		arg.LastName,
		arg.BhcPlotNumber,
	)
	var i OnboardCustomerRow
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.PhotoUrl,
		&i.IsExistingCustomer,
		&i.Phone,
		&i.FirstName,
		&i.LastName,
		&i.BhcPlotNumber,
	)
	return i, err
}
